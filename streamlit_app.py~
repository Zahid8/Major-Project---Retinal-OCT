import streamlit as st
from PIL import Image
from io import BytesIO
import base64
import tensorflow as tf
import os
from keras.preprocessing import image
import tensorflow as tf 
import keras 
import cv2
import numpy as np
from matplotlib import pyplot as plt
import keras
import tensorflow as tf

st.set_page_config(layout="wide", page_title="Image Background Remover")

st.write("## Remove background from your image")
st.write(
    ":dog: Try uploading an image to watch the background magically removed. Full quality images can be downloaded from the sidebar. This code is open source and available [here](https://github.com/tyler-simons/BackgroundRemoval) on GitHub. Special thanks to the [rembg library](https://github.com/danielgatis/rembg) :grin:"
)
st.sidebar.write("## Upload and download :gear:")

def denoise(im_path):
	model_den = tf.keras.models.load_model("/home/crossfire/Programming projects/OCT/denoise model.h5")
	val_image = []
	img = tf.keras.utils.load_img(im_path, target_size=(180,180), color_mode= 'grayscale')
	img = tf.keras.utils.img_to_array(img)
	img = img/255
	val_image.append(img)
	train_df = np.array(val_image)
	test_test = []
	SIZE_X = 180
	SIZE_Y = 180
	img = cv.imread(im_path, 0)       
	img = cv.resize(img, (SIZE_Y, SIZE_X))
	pred= model_den.predict(train_df)
	pred=np.reshape(pred, (180,180))
	return pred

# Download the fixed image
def convert_image(img):
    buf = BytesIO()
    img.save(buf, format="PNG")
    byte_im = buf.getvalue()
    return byte_im


def fix_image(upload):
    image = Image.open(upload)
    col1.write("Original Image :camera:")
    col1.image(image)

    fixed = remove(image)
    col2.write("Fixed Image :wrench:")
    col2.image(fixed)
    st.sidebar.markdown("\n")
    st.sidebar.download_button("Download fixed image", convert_image(fixed), "fixed.png", "image/png")
    
def fix_image(upload):

	model_seg = tf.keras.models.load_model('/home/crossfire/Programming projects/OCT/segmentation model.hdf5')
	model_class = tf.keras.models.load_model("/home/crossfire/Programming projects/OCT/classify model.h5")
	
	fixed = denoise(im_path)
    col2.write("Fixed Image :wrench:")
    col2.image(fixed)
    st.sidebar.markdown("\n")
    st.sidebar.download_button("Download fixed image", convert_image(fixed), "fixed.png", "image/png")
	

col1, col24 = st.columns(2)
my_upload = st.sidebar.file_uploader("Upload an image", type=["png", "jpg", "jpeg"])

if my_upload is not None:
    fix_image(upload=my_upload)
else:
    fix_image("./zebra.jpg")


